#!/usr/bin/env python3
"""
test script for calm.profile webhook integration
simulates stripe checkout.session.completed event
"""

import json
import requests
import os
from datetime import datetime

# test configuration
API_BASE_URL = "http://localhost:5000"
TEST_EMAIL = "test@acme-corp.com"
TEST_ASSESSMENT_ID = 1


def create_test_webhook_payload():
    """create test stripe webhook payload"""
    return {
        "id": "evt_test_webhook",
        "object": "event",
        "api_version": "2020-08-27",
        "created": int(datetime.now().timestamp()),
        "data": {
            "object": {
                "id": "cs_test_session",
                "object": "checkout.session",
                "amount_total": 5000,
                "currency": "usd",
                "customer_details": {"email": TEST_EMAIL},
                "metadata": {"assessment_id": str(TEST_ASSESSMENT_ID)},
                "payment_status": "paid",
            }
        },
        "livemode": False,
        "pending_webhooks": 1,
        "request": {"id": "req_test_request", "idempotency_key": None},
        "type": "checkout.session.completed",
    }


def test_webhook_endpoint():
    """test the webhook endpoint"""
    print("🧪 testing stripe webhook endpoint...")

    # create test payload
    payload = create_test_webhook_payload()

    # create test signature (in real implementation, this would be generated by stripe)
    headers = {
        "Content-Type": "application/json",
        "Stripe-Signature": "t=1234567890,v1=test_signature",  # test signature
    }

    try:
        # test the webhook endpoint
        response = requests.post(
            f"{API_BASE_URL}/api/stripe/webhook",
            json=payload,
            headers=headers,
            timeout=30,
        )

        print(f"status code: {response.status_code}")
        print(f"response: {response.json()}")

        if response.status_code == 200:
            print("✅ webhook test passed")
            return True
        else:
            print("❌ webhook test failed")
            return False

    except requests.exceptions.ConnectionError:
        print("❌ connection failed - is the api server running?")
        print("   start with: python app.py")
        return False
    except Exception as e:
        print(f"❌ test failed: {e}")
        return False


def test_health_endpoint():
    """test the health endpoint"""
    print("🏥 testing health endpoint...")

    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5)

        if response.status_code == 200:
            print("✅ health check passed")
            return True
        else:
            print("❌ health check failed")
            return False

    except requests.exceptions.ConnectionError:
        print("❌ connection failed - is the api server running?")
        return False
    except Exception as e:
        print(f"❌ health check failed: {e}")
        return False


def main():
    """main test function"""
    print("🚀 calm.profile webhook integration test")
    print("=" * 50)

    # test health first
    if not test_health_endpoint():
        print("\n❌ api server not available")
        return 1

    print()

    # test webhook
    if not test_webhook_endpoint():
        print("\n❌ webhook test failed")
        return 1

    print("\n✅ all tests passed!")
    print("\n📋 test summary:")
    print(f"   - api server: running at {API_BASE_URL}")
    print(f"   - test email: {TEST_EMAIL}")
    print(f"   - test assessment id: {TEST_ASSESSMENT_ID}")
    print("   - webhook endpoint: /api/stripe/webhook")

    return 0


if __name__ == "__main__":
    exit(main())




